import net.ltgt.gradle.errorprone.errorprone

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.6/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
    id("net.ltgt.errorprone") version "4.0.0"
    id("io.freefair.lombok") version "8.6"
    id("com.github.johnrengelman.shadow") version "8.1.1"
}

val camelVersion = "4.8.0"
val log4jVersion = "2.23.1"
val errorproneVersion = "2.32.0"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation("org.apache.camel:camel-base:${camelVersion}")
    implementation("org.apache.camel:camel-core:${camelVersion}")
    implementation("org.apache.camel:camel-main:${camelVersion}")
    implementation("org.apache.camel:camel-stream:${camelVersion}")
    implementation("org.apache.camel:camel-support:${camelVersion}")
    implementation("org.apache.camel:camel-platform-http-main:${camelVersion}")
    implementation("org.apache.camel:camel-timer:${camelVersion}")
    implementation("org.apache.camel:camel-console:${camelVersion}")
    implementation("org.apache.camel:camel-management:${camelVersion}")
    implementation("org.apache.camel:camel-cli-connector:${camelVersion}")
    implementation("org.apache.camel:camel-debug:${camelVersion}")
    implementation("org.apache.camel:camel-kafka:${camelVersion}")
    implementation("org.apache.logging.log4j:log4j-core:${log4jVersion}")

    errorprone("com.google.errorprone:error_prone_core:$errorproneVersion")
    runtimeOnly("org.apache.logging.log4j:log4j-slf4j2-impl:${log4jVersion}")
}

testing {
    suites {
        // Configure the built-in test suite
        val test by getting(JvmTestSuite::class) {
            // Use JUnit Jupiter test framework
            useJUnitJupiter("5.9.1")
        }
    }
}

application {
    // Define the main class for the application.
    mainClass.set("com.empyrean.camel.App")
}

tasks.withType<JavaCompile>().configureEach {
    options.errorprone.disableWarningsInGeneratedCode.set(true)
    options.compilerArgs.addAll(listOf(
        "-Xplugin:ErrorProne",
        "--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
        "--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED",
        "--add-exports=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED",
        "--add-exports=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED",
        "--add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
        "--add-exports=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED",
        "--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
        "--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED",
        "--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED",
        "--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED"
    ))
}